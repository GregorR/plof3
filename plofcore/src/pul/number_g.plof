/*
 * Numbers (specifically, Integers) and comparisons
 *
 *  Copyright (c) 2008, 2010 Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// basic math
grammar {
    plof_cmp => plof_add

    plof_add = plof_add "\+"n plof_add_next => plof {
        opAddOf($0, $2)
    }
    plof_add = plof_add "-"n plof_add_next => plof {
        opSubOf($0, $2)
    }
    plof_add = plof_add_next => plof { $0 }
    plof_add => plof_mul

    plof_mul = plof_mul "\*"n plof_mul_next => plof {
        opMulOf($0, $2)
    }
    plof_mul = plof_mul /\// white plof_mul_next => plof {
        opDivOf($0, $3)
    }
    plof_mul = plof_mul "%"n plof_mul_next => plof {
        opModOf($0, $2)
    }
    plof_mul = plof_mul_next => plof { $0 }

    plof_unop => plof_postfixopr

    plof_postfixopr = plof_postfixopr "\+\+" => plof {
        $0 = opIncOf($0)
    }
    plof_postfixopr = plof_postfixopr "--" => plof {
        $0 = opDecOf($0)
    }
    plof_postfixopr = plof_postfixopr_next => plof { $0 }
}

grammar {
    plof_unop = "-" plof_unop => plof {
        0 - $1
    }

    plof_unop = "\+" plof_unop => plof {
        $1
    }
}
