/*
 * A pseudo-AST for PSL
 *
 * Copyright (C) 2009 Gregor Richards
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var ASTNode = Object : []

var UnaryASTNode = ASTNode : [
    this (c) {
        this.first = c
    }
]

var BinaryASTNode = UnaryASTNode : [
    this (c1, c2) {
        super(c1)
        this.second = c2
    }
]

var TrinaryASTNode = BinaryASTNode : [
    this (c1, c2, c3) {
        super(c1, c2)
        this.third = c3
    }
]

var QuaternaryASTNode = TrinaryASTNode : [
    this (c1, c2, c3, c4) {
        super(c1, c2, c3)
        this.fourth = c4
    }
]

var QuinaryASTNode = QuaternaryASTNode : [
    this (c1, c2, c3, c4, c5) {
        super(c1, c2, c3, c4)
        this.fifth = c5
    }
]

// Build AST node types of all the simple cases
var i
for (i = psl.ppop.val + 1) (i <= 255) (i++) (
    if (psl.pslInstructions[i] !== Null) (
        var inst = psl.pslInstructions[i]

        if (inst.pushes == 1) (
            // simple case, default AST node
            inst.ASTNode = (if          (inst.arity == 0) ASTNode
                            else if     (inst.arity == 1) UnaryASTNode
                            else if     (inst.arity == 2) BinaryASTNode
                            else if     (inst.arity == 3) TrinaryASTNode
                            else if     (inst.arity == 4) QuaternaryASTNode
                            else if     (inst.arity == 5) QuinaryASTNode
                            else                          ASTNode) : []
        )
    )
)

/* pushes and pops have no AST nodes, resolve is very special, and there are a
 * few nodes which are not directly correlated to instructions */

// resolve has a false arity of four, where two of the children are in fact temps to write into
psl.presolve.ASTNode = BinaryASTNode : [
    this (c1, c2, t1, t2) {
        super(c1, c2)
        this.t1 = t1
        this.t2 = t2
    }
]

// seq is just a sequence of instructions
var Seq = ASTNode : [
    this (children as Collection) {
        this.children = children
    }
]

// settemp and gettemp set and get temporary variables, respectively
var SetTemp = UnaryASTNode : [
    this (t1, c1) {
        super(c1)
        this.temp = t1
    }
]
var GetTemp = ASTNode : [
    this (t1) {
        this.temp = t1
    }
]

var pslToAst = (pslbuf) {
    var astout = [[ ]]
    var aststack = [[ ]]

    while (pslbuf.length() > 0) (
        // get the current instruction
        var cmd = pslbuf[0]
        pslbuf = pslbuf.sliceFrom(1)
        var raw = Null

        // maybe it has raw data
        if (cmd >= psl.pmarker.val) (
            // it has raw data
            var rawlen
            pslbuf = pslbignum.bignumToInt(pslbuf, ref rawlen)
            raw = pslbuf.slice(0, rawlen)
            pslbuf = pslbuf.sliceFrom(rawlen)
        )

        // get the command object
        cmd = psl.pslInstructions[cmd]

        // if we need to save our stack, do so
        if (cmd.val <= psl.ppush7.val || cmd.pushes != 1) (
            //saveStack()
        )
    )
}
