/*
 * Basic support for exceptions.
 *
 *  Copyright (c) 2008 Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// throw is just a function ...
var throw = (x) {
    psl {
        plof{x} pul_eval throw
    }
}

// as is try/catch
var try = (x) {
    psl {
        {
            plof{x} pul_eval pop
            null
        }
        {} catch

        // store the exception
        this "exception" push2 memberset

        // if the result is null, we didn't throw
        push0 null
        {
            // so just return selff
            plof{selff}
        }
        {
            // if it was not a Plof object, ignore it (FIXME: should I really be eval'ing here?)
            push0 pul_eval "__pul_type" member
            null {
                // ignore returns
                push0 "__pul_ret_val" member
                null {
                    // rethrow anything that doesn't carry a string
                    push0 "+exception" member
                    null {
                        throw
                    } {
                        // OK, wrap it up
                        1 array
                        plof{opString} pul_eval
                        call 1 array
                        plof{new InternalException} pul_eval
                        call
                    } cmp
                } {
                    // nope, rethrow
                    throw
                } cmp
            } {} cmp

            // otherwise, must catch
            plof{
                (x) {
                    x exception
                }
            }
        } cmp
    }
}

var catchall = (ex, r, f) {
    r.write ex
    f
    selff
}


// Technically anything can be thrown, but the user should only throw Exceptions
var Exception = Object : [
    str = Null // to be filled in

    this () {
        setMessage(str)
    }

    setMessage = (s /* as String, but no dynamic types yet */) {
        psl {
            plof{this} pul_eval "+exception"
            plof{s.__pul_val} pul_eval memberset
        }
    }

    getMessage = {
        opString(psl {
            plof{this} pul_eval "+exception" member
        })
    }
]

// Internal exception
var InternalException = Exception : [
    this(str) {
        setMessage(str)
    }
]

// System exceptions
var AbstractFunctionException = Exception : [
    str = Null // to be filled in

    this() {
        setMessage(str)
    }
]

var TypeMismatchException = Exception : [
    str = Null // to be filled in

    init = (obj, type) {
        setMessage(str)
        this.obj = obj
        this.type = type
        return this
    }

    obj = Object
    type = Object
]

// Simple pseudofunction to throw abstract
var Abstract = {
    throw (new AbstractFunctionException)
}
