/*
 * Comparisons
 *
 *  Copyright (c) 2008 Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

Object := [
    // Use object equality by default
    opEquals = (x) {
        psl {
            plof{this} pul_eval
            plof{x} pul_eval
            {
                plof{True}
            }
            {
                plof{False}
            } cmp
        }
    }

    // Just do a not-equals for nequals
    opNEquals = (x) {
        !(this == x)
    }

    // All the comparisons use opCmp by default
    opLess = (x) {
        this.opCmp(x) < 0
    }
    opLessEqual = (x) {
        this.opCmp(x) <= 0
    }
    opGreater = (x) {
        this.opCmp(x) > 0
    }
    opGreaterEqual = (x) {
        this.opCmp(x) >= 0
    }
]

var opEqualsOf = (x, y) { x.opEquals y }
var opNEqualsOf = (x, y) { x.opNEquals y }
