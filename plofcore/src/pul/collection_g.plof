/*
 * Collection types
 *
 *  Copyright (c) 2008, 2009, 2010 Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// indexing and similar in the grammar
grammar {
    plof_member = plof_member "\["w plof_semicolon "\]" => plof {
        $0.opIndex($2)
    }

    plof_as => plof_in

    plof_in = plof_in_next "in"w plof_in_next => plof {
        $2.opContains($0)
    }
    plof_in = plof_in_next => plof { $0 }

    plof_mul => plof_range

    plof_range = plof_range "to"w plof_range_next => plof {
        new Range($0, $2, 1)
    }
    plof_range = plof_range "to"w plof_range_next "by"w plof_range_next => plof {
        new Range($0, $2, $4)
    }
    plof_range = plof_range_next => plof { $0 }
}

// the grammar for ListArrays
grammar {
    plof_literal = "\[\["w plof_arr_elems "\]\]" => plof {
        new ListArray() ~= new Array($1)
    }

    plof_arr_elems = white => plof {
        psl {
            0 array
        }
    }
    plof_arr_elems = plof_arr_elems_next => plof { $0 }
    plof_arr_elems => plof_arr_elems_prime

    plof_arr_elems_prime = plof_arr_elems_prime ","w plof_arr_elems_prime_next => plof {
        psl {
            $0 pul_eval
            $2 1 array
            aconcat
        }
    }
    plof_arr_elems_prime = plof_arr_elems_prime_next => plof {
        psl {
            $0 1 array
        }
    }
    plof_arr_elems_prime => plof_arr_elem

    plof_arr_elem = plof_semicolon_next => plof { $0 }
}
