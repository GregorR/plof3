/*
 * Support for PSL files
 *
 * Copyright (C) 2009 Gregor Richards
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import(pslbignum)

var InvalidPSLFileException = Exception : [
    this () {
        setMessage("Invalid PSL file")
    }
]

var NoPSLProgramDataException = Exception : [
    this () {
        setMessage("PSL file contains no program data (PlofPlof currently does not support stripped PSL)")
    }
]

var PSLFile = Object : [
    sectionProgramData = 0
    sectionComment = 1
    sectionStrippedProgramData = 2
    sectionRawDataTable = 3

    this (dat) {
        this.dat = dat
    }

    getPSL = () {
        // first make sure it's a valid PSL file
        if (dat.slice(0, 8) != [[158, 80, 83, 76, 23, 242, 88, 140]]) (
            throw (new InvalidPSLFileException())
        )

        // get the sections
        var buf = dat.sliceFrom(8)
        var programData = Null
        var strippedProgramData = Null
        var rawDataTable = Null
        while (buf.length() > 0) (
            var secsize
            var sectype
            buf = pslbignum.bignumToInt(buf, ref secsize)
            var secbuf = pslbignum.bignumToInt(buf, ref sectype)
            secbuf = secbuf.slice(0, secsize - 1) // FIXME: secsize - 1 is arbitrary
            buf = buf.sliceFrom(secsize)

            // if we care about this section, keep it
            if (sectype == sectionProgramData) (
                programData = secbuf
            ) else if (sectype == sectionStrippedProgramData) (
                strippedProgramData = secbuf
            ) else if (sectype == sectionRawDataTable) (
                rawDataTable = secbuf
            )
        )

        // make sure we have what we need
        if (programData === Null) (
            throw (new NoPSLProgramDataException())
        )

        return programData
    }
]
