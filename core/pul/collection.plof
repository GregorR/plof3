/*
 * The standard Plof collection class, ported from Plof2.
 *
 *  Copyright (c) 2007  Gregor Richards
 *  Copyright (c) 2007  Josiah Worcester
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

var Collection = Object : [
	NilElement = Object : [];

	each = (x){
		x = x as Function;
		Abstract();
	};

	dup = {
		Abstract();
	}

	apply = (x){
		x = x as Function;
		Abstract();
	};

	map = (x){
		dup().apply(x);
	};

	size = (x){
		var i = 0;
		each((x){i++});
		return(i);
	};

	fold = (init, f) {
		f = f as Function;
		var ret = init;
		each((x){ret = f(ret,x)});
		return(ret);
	};

	sum = {
		fold(0, (x, y){x+y})
	};

	product = {
		fold(0, (x, y){x*y})
	};
];
