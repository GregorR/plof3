psl { "Version strings:" print };
versions.each((x) {
    psl { plof{x.__pul_val} pul_eval print }
});

psl { "Integer value 3 is always good." print };

// Prototypes test
var a = Object : [];
var b = a : [];
a.a = 3;
psl {
    plof{b.a} pul_eval "__pul_val" member print
};


// Simple true/false test
True.ifTrue(psl { "GOOD " print });
False.ifTrue(psl { "BAD" print });


// If "statements"
if (True) (
    psl { "GOOD " print }
) else (
    psl { "BAD" print }
);


// Currying
var curryish = (a, b, c) {
    psl {
        plof{a} pul_eval print
        plof{b} pul_eval print
        plof{c} pul_eval print
    };
};
curryish psl{"This should come first."} psl{"Then this."} psl{"Then this should come third and last."};


// While "statement"
var a = True;
var b = True;
var c = True;
var d = False;
while (a) (
    psl { "This should be printed three times." print };
    a = b;
    b = c;
    c = d;
);


// Constructors
var Foo = Object : [
    this (n) {
        this.n = n;
    };
];
var foo = new Foo(3);
psl { plof{foo.n} pul_eval "__pul_val" member print };


// Try/catch
psl { "Try" print };
var x = Object;
try (
    throw (psl { 3 integer })
) catchall (ref x) (
    psl { plof{x} pul_eval print }
);


// Object types
psl { "Types" print };
if (Foo is Foo) (
    psl { "GOOD " print };
) else (
    psl { "BAD" print };
);
if (Foo is Object) (
    psl { "GOOD " print };
) else (
    psl { "BAD" print };
);
if (Object is Foo) (
    psl { "BAD" print };
) else (
    psl { "GOOD " print };
);


// Typed functions
psl { "Typed functions" print };
var foo = (x as Foo) {
    x
};
try (
    foo(Foo);
    psl { "GOOD " print };
) catchall (ref x) (
    psl { "BAD" print };
);
try (
    foo(Object);
    psl { "BAD" print };
) catchall (ref x) (
    psl { "GOOD " print };
);


// Numbers
psl { "Numbers" print };
x = 27 - 6 * 4;
psl { plof{x} pul_eval "__pul_val" member print };


// Arrays
psl { "Arrays" print };
x = new Array(psl {
    plof{4} 1 integer array
});
x[0] = 3;
psl { plof{x[0]} pul_eval "__pul_val" member print };


// Lists
psl { "Lists" print };
x = new MList(Object);
x[1] = 3;
psl { plof{x[1]} pul_eval "__pul_val" member print };


// ListArrays
psl { "ListArrays" print };
x = [[ 0, 1, 2, 3, 4, 5 ]];
psl { plof{x[3]} pul_eval "__pul_val" member print };
x ~= [[ 4, 3, 2, 1, 0 ]];
psl { plof{x[7]} pul_eval "__pul_val" member print };
