/*
 * Wrapper around PCRE
 *
 *  Copyright (c) 2009  Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

var PCRE = Object : [
    libpcre = C.dlopen("libpcre.so.0");

    // pcre_compile
    pcre_compile_s = C.dlsym(libpcre, "pcre_compile");
    pcre_compile_c = C.prepcif(
        C.pointer,
        [[  C.pointer,
            C.int,
            C.pointer,
            C.pointer,
            C.pointer ]],
        0);
    // returns [[ success, pointer or error string ]]
    compile = (pattern as String,
               options as Number) {
        // allocate space for the pattern and errptr
        var c_pattern = C.calloc(pattern.length() + 1);
        C.set(c_pattern, pattern);
        var c_err = C.malloc(256);
        var c_errptr = C.malloc(C.sizeof(C.pointer));
        C.set(c_errptr, c_err);
        var c_erroffset = C.malloc(C.sizeof(C.int));

        // call compile
        var ret;
        var cret = C.call(pcre_compile_c, pcre_compile_s,
                          [[c_pattern, options as NativeInteger,
                            c_errptr, c_erroffset,
                            null]]);
        if ((cret as Number) == 0) (
            ret = [[Null, C.getstr(c_err)]];
        ) else (
            ret = [[cret, Null]];
        );

        // free everything
        C.free(c_erroffset);
        C.free(c_errptr);
        C.free(c_err);
        C.free(c_pattern);

        return ret;
    };

    // pcre_exec
    pcre_exec_s = C.dlsym(libpcre, "pcre_exec");
    pcre_exec_c = C.prepcif(
        C.int,
        [[  C.pointer,
            C.pointer,
            C.pointer,
            C.int,
            C.int,
            C.int,
            C.pointer,
            C.int ]],
        0);
    // returns [[ success, pointer or error string ]]
    compile = (pattern as String,
               options as Number) {

