/*
 * The standard Plof library
 *
 *  Copyright (c) 2007, 2008  Gregor Richards
 *  Copyright (c) 2007  Josiah Worcester
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// 'new' is a convenience function to create a new object derived from a prototype
var new = (x){
    var ret = x : [];
    (ret.init is Function).ifTrue(
        ret.init()
    );
    return(ret);
};

// Undefined functions in abstract objects are set to Abstract, which will just die
var Abstract = {
    unsupportedFunctionException();
};

// The basic procedural 'while'
var while = (cond, inner) {
    psl {
        {
            // check the condition
            new push0 "__pul_e"
            {
                // The condition was false, so break
                new push0 "__pul_while_break" new memberset throw
            } memberset 1 integer array
            this "cond" pul_var member pul_forceEval
                 "ifFalse" member pul_eval call pul_eval
            pop

            // run the inner
            this "inner" pul_var member pul_forceEval
            pop

            // and loop
            loop
        }
        {
            // catch __pul_while_break
            push0 "__pul_while_break" member null
            {
                // it was null, this isn't ours!
                throw
            }
            {} cmp
        } catch
    };
};

var for = (init, cond, step, inner) {
    init;
    while(forceEval(cond), (
        forceEval(inner);
        forceEval(step);
    ));
};

// Constants for if
var IfOperation = Object:[];
var else = IfOperation:[];
var elsif = IfOperation:[];

// 'if' won't work until Array is in place, but it can be written
var if = {
    /* args[0] is the first condition, args[1] is the operation to perform if
     * the first condition is true */
    (args[0] && (args[1], return()));
    
    // if we haven't returned, we're on to elses and elsifs
    for(var i = 2, i < args.size(), i = i + 1, (
        (args[i] is else).ifTrue((
            i = i + 1;
            
            // handle the else case
            args[i];

            // and we're done
            return();
        ));
        (args[i] is elsif).ifTrue((
            i = i + 1;

            // handle this other case
            (args[i] && (args[i+1], return()));

            // if we haven't returned, more cases
            i = i + 2;
        ));
    ));
};
