/*
 * The Plof User Language basic definitions. This file provides the procedures
 * necessary to support lazy evaluation, as well as the now mostly-empty Object
 * object.
 *
 *  Copyright (c) 2007, 2008, 2009  Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

psl {
    /* PUL objects can potentially be unevaluated. This function evaluates
     * unevaluated objects, or just returns the object if it has been evaluated.
     * A boxed object has a __pul_e function to evaluate it, and a __pul_v
     * member if it has already been evaluated */
    global "__pul_eval" {
        // is __pul_v set?
        push0 "__pul_v" member null
        {
            // no __pul_v, how 'bout __pul_e?
            push0 "__pul_e" member null
            {
                // neither, it's just a value
            }
            {
                // __pul_e is set, call it
                null push1 "__pul_e" member call
                global "__pul_eval" member call
            } cmp
        }
        {
            // __pul_v is set, use it
            "__pul_v" member
            global "__pul_eval" member call
        } cmp
    } memberset

    // This forces a boxed object to be evaluated, even if it already has been
    global "__pul_forceEval" {
        // is __pul_e set?
        push0 push0 "__pul_e" member null
        {
            // neither, it's just a value
        }
        {
            // call __pul_e
            null push1 "__pul_e" member call
            global "__pul_eval" member call
        } cmp
    } memberset

    /* PUL returns are by-ref, so you can set through them. They include a
     * __pul_s function to set. This function is just a wrapper around __pul_s
     * Arguments: [wrapper object, new value] */
    global "__pul_set" {
        // arg: [byref object, new value]

        // make sure __pul_s is set
        push0 0 index "__pul_s" member null
        {
            // not set: This should be handled better (FIXME)
        }
        {
            // OK, set it
            push0 1 index
            push1 0 index "__pul_s" member call
        } cmp
    } memberset

    // create an unevaluated value from a procedure
    global "__pul_funcwrap" {
        // arg: procedure

        // put the procedure in a variable
        this "proc" push2 memberset

        // then make an object
        new

        // first, __pul_e
        push0 "__pul_e" {
            null this "proc" resolve member call
            global "__pul_eval" member call
        } memberset

        // then __pul_s
        push0 "__pul_s" {
            null this "proc" resolve member call
            push1 2 array
            global "__pul_set" member call
        } memberset
    } memberset


    // create an unevaluated value from a variable
    global "__pul_varwrap" {
        "VARWRAP" print
        // arg: [context, name]

        // put the argument in a var
        this "arg" push2 memberset

        // then make an object
        new

        // first, __pul_e
        push0 "__pul_e" {
            this "arg" resolve member
            push0 0 index
            push1 1 index
            null
            3 array

            this "opMember" resolve member pul_eval call

            push1 1 index member
        } memberset

        // then, __pul_s
        push0 "__pul_s" {
            this "arg" resolve member
            push0 0 index
            push1 1 index
            push3
            memberset
        } memberset
    } memberset

    // create an unevaluated value for the parent of an object
    global "__pul_parentwrap" {
        // arg: object

        // put the argument in a var
        this "obj" push2 memberset

        // then make an object
        new

        // first, __pul_e
        push0 "__pul_e" {
            this "obj" resolve member
            parent
        } memberset

        // then, __pul_s
        push0 "__pul_s" {
            this "obj" resolve member
            push1
            parentset
        } memberset
    } memberset


    /* Because everything is wrapped, "var" needs to know where to put a
     * variable correctly. Plof function contexts are marked with the member
     * "__pul_fc" for this purpose, and __pul_fcontext finds the nearest
     * function context */
    global "__pul_fcontext" {
        // arg: context
        "__pul_fc" resolve pop
    } memberset

    // the top context is a PUL fcontext
    this "__pul_fc" this memberset

    /* basic opInteger, filled in later to refer to NativeInteger. Given a
     * primitive integer, opInteger creates an object with __pul_val set to
     * that primitive value. */
    pul_fcontext "opInteger" {
        new push0 "__pul_val" push3 0 index memberset
    } memberset


    // The most important object in the game, Object
    new push0 pul_fcontext parentset

    // top.Object = ...
    pul_fcontext "Object" push2 memberset

    // Object.this = Object
    push0 "this" push2 memberset

    // Object.__pul_type = [Object]
    push0 "__pul_type"
        push2 1 array 
        push0 push4 parentset
    memberset

    // Object.__pul_fc = Object
    push0 "__pul_fc"
        push2
    memberset

    // opDuplicate duplicates an object, used for derivation
    pul_fcontext "opDuplicate"
    {
        push0 0 index

        // make the new object
        new combine

        // object.this = object
        push0 "this" push2 memberset

        // objects are function contexts
        push0 "__pul_fc" push2 memberset

        // their type is based on the parent type (if set)
        push0 "__pul_type" member null
        {
            // no parent type
            push0 "__pul_type"
                push2 1 array
                push0 push4 parentset
            memberset
        }
        {
            // use the parent type
            push0 "__pul_type"
                push2 1 array
                push3 "__pul_type" member pul_eval
                aconcat
                push0 push4 parentset
            memberset
        } cmp

        // and reparent everything
        push0 push2 0 index 2 array
        this "opReparent" resolve member call pop
    } memberset

    // opReparent reparents members of $0 from $1
    pul_fcontext "opReparent"
    {
        this "object"  push2 0 index memberset
        this "old"     push2 1 index memberset
        this "members" push2 0 index members memberset
        this "index"   0 memberset

        null
        {
            // we've finished if the index is >= the length
            this "index" resolve member
            this "members" resolve member length
            { global } { null } lt
        }
        {
            // no, check this one
            this "object" resolve member
                this "members" resolve member
                    this "index" resolve member
                        index
                    member

                // if the parent is the old one, we'll reparent
                parent this "old" resolve member
                {
                    this "object" resolve member
                        this "members" resolve member
                            this "index" resolve member
                                index

                            // now we have the object and the name, so reparent it
                            push1 push1 member
                                1 array
                                this "opDuplicate" resolve member call pul_eval
                                push0 push3 parentset
                                memberset
                }
                {} cmp

                // and increment the index
                this "index" resolve
                        this "index" resolve member 1 add
                            memberset
        } while pop
    } memberset

    // opCombine reconciles combined objects
    pul_fcontext "opCombine"
    {
        // arg: [old1, old2]
        this "old1" push2 0 index memberset
        this "old2" push2 1 index memberset

        // do the primitive combine first
        push0 0 index push1 1 index combine

        // put it in "new" for later
        this "new" push2 memberset

        // object.this = object
        push0 "this" push2 memberset

        // objects are function contexts
        push0 "__pul_fc" push2 memberset

        // their type is based on the parent types (if set)
        this "old1" member "__pul_type" member pul_eval null
        {
            // none on the left, how 'bout the right
            this "old2" resolve member "__pul_type" member pul_eval null
            {
                // none on either side, just use itself
                this "new" resolve member "__pul_type"
                    push1 1 array
                memberset
            }
            {
                // right but not left
                this "new" resolve member "__pul_type"
                    push1 1 array
                    this "old2" resolve member "__pul_type" member pul_eval
                    aconcat
                memberset
            } cmp
        }
        {
            // left is set, how 'bout the right
            this "old2" resolve member "__pul_type" member pul_eval null
            {
                // left but not right
                this "new" resolve member "__pul_type"
                    push1 1 array
                    this "old1" resolve member "__pul_type" member pul_eval
                    aconcat
                memberset
            }
            {
                // both set
                this "new" resolve member "__pul_type"
                    push1 1 array
                    this "old2" resolve member "__pul_type" member pul_eval
                    aconcat
                    this "old1" resolve member "__pul_type" member pul_eval
                    aconcat
                memberset
            } cmp
        } cmp

        // reparent all members
        push0
        this "old1" member
        2 array
        this "opReparent" resolve member call pop

        push0
        this "old2" member
        2 array
        this "opReparent" resolve member call pop
    } memberset

    /* opMember is what really implements the prototype-based object system in
     * Plof. opMember searches for the $1'th member of object $0, but also
     * searches through the object's type before searching through its parents.
     * It returns either null or the object which ultimately contains the
     * desired name */
    this "opMember" {
        this "obj" push2 0 index pul_eval memberset
        this "name" push2 1 index pul_eval memberset
        this "cont" push2 2 index memberset

        // first get the type
        this "type"

        // obj.__pul_type == null? leaves __pul_type on the stack
        this "obj" member "__pul_type" member push0 null
        {
            // nope, invent a type
            this "obj" resolve member 1 array
        }
        {
            // keep the type as-is
        } cmp

        memberset

        // if we have it directly, it'll go here, otherwise this will start as null
        this "ret"

        this "obj" member
            this "name" member
                member
        push0 null
        {
            // nope, ret = null
        }
        {
            // set ret to this.obj
            this "obj" resolve member
        } cmp

        memberset

        // now loop over the type
        this "index" 1 memberset
        null
        {
            // continue if ret == null
            this parent "ret" member null
            {
                // and index < length
                this "index" resolve member
                this "type" resolve member length
                { global } { null } lt
            } { null } cmp
        }
        {
            // OK, check if this element of type contains the seeked value
            this "type" resolve member
                this "index" resolve member
                    index
                push0
                    this "name" resolve member
                        member

            // stack is now: type[index] type[index].name

            push0 null
            {
                // nope, keep looking
            }
            {
                // found it! Copy it if it's owned by the type
                push0 this "name" resolve member member

                // stack: type[index] type[index].name
                push0 parent
                    this "type" resolve member
                        this "index" resolve member
                            index
                {
                    // yup, it's owned by the type. Duplicate,
                    new combine

                    // and reparent
                    push0
                        this "obj" resolve member
                            parentset
                }
                {} cmp

                // assign it into this object
                this "obj" resolve member
                    this "name" resolve member
                        push2 memberset
                pop

                // stack: type[index]

                // and assign it
                this parent parent "ret" push2 memberset
            } cmp

            // index++
            this "index" resolve
                    push1 push1 member
                        1 add
                        memberset
        } while

        // if we haven't found anything,
        this "ret" member push0 null
        {
            // are we supposed to continue?
            this "cont" resolve member null
            {
                // nope, just let null fall through
            }
            {
                // OK, recurse if it's not null
                this "obj" resolve member parent
                push0 null
                {
                    // it was null! well, just let the null trickle down
                }
                {
                    this "name" resolve member
                    global
                    3 array
                    this "opMember" resolve member pul_eval call
                } cmp
            } cmp
        }
        {
            // oh, we found it, done
        } cmp
    } memberset
}
