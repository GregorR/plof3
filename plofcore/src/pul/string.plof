/*
 * The standard Plof string class.
 *
 *  Copyright (c) 2007, 2009  Gregor Richards
 *  Copyright (c) 2007  Josiah Worcester
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// Strings are all String objects, which is currently a stub
var String = Object : [
    this (intstring) {
        this.__pul_val = intstring
    }

    opEquals = (x) {
        var xs = x as String
        if (!(xs === Null)) (
            return (opInteger(psl {
                    plof{this.__pul_val} pul_eval
                    plof{xs.__pul_val} pul_eval
                    rawcmp
                }) == 0)
        )
        return False
    }

    opConcat = (x as String) {
        return (new String(psl {
            plof{this.__pul_val} pul_eval
            plof{x.__pul_val} pul_eval
            concat
        }))
    }

    length = {
        opInteger(psl {
            plof{this.__pul_val} pul_eval
            rawlength
        })
    }

    slice = (fromi as NativeInteger, toi as NativeInteger) {
        new String(psl {
            plof{this.__pul_val} pul_eval
            plof{fromi.__pul_val} pul_eval
            plof{toi.__pul_val} pul_eval
            slice
        })
    }

    charCodeAt = (i as NativeInteger) {
        opInteger(psl {
            plof{this.__pul_val} pul_eval
            plof{i.__pul_val} pul_eval
            push0 1 add
            slice
            integer
        })
    }

    eval = {
        psl {
            null
            plof{this.__pul_val} pul_eval

            // parse it
            "plof_semicolon" "eval" parse

            // and run it
            call
        }
    }
]

var opString = (x) {
    new String(x)
}

var eval = (s as String) {
    s.eval()
}
