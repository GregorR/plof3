/*
 * Interface for the C Native Function Interface
 *
 *  Copyright (c) 2008  Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// the psl operations
pslbnf {
    pslOp = white /dlopen/ token =>     { 193 integer byte }
    pslOp = white /dlclose/ token =>    { 194 integer byte }
    pslOp = white /dlsym/ token =>      { 195 integer byte }
    pslOp = white /cmalloc/ token =>    { 196 integer byte }
    pslOp = white /cfree/ token =>      { 197 integer byte }
    pslOp = white /cget/ token =>       { 198 integer byte }
    pslOp = white /cset/ token =>       { 199 integer byte }
    pslOp = white /ctype/ token =>      { 200 integer byte }
    pslOp = white /cstruct/ token =>    { 201 integer byte }
    pslOp = white /csizeof/ token =>    { 202 integer byte }
    pslOp = white /csget/ token =>      { 203 integer byte }
    pslOp = white /csset/ token =>      { 204 integer byte }
    pslOp = white /prepcif/ token =>    { 205 integer byte }
    pslOp = white /ccall/ token =>      { 206 integer byte }
};

// and their Plof equivalents
var C = Object : [
    dlopen = (filename as String) {
        psl {
            this "filename" pul_var member pul_eval "__value" member
            dlopen
            push0 null
            {}
            {
                1 integer array
                this "opNumber" pul_var member pul_eval call
            } cmp
        }
    };

    dlclose = (handle as NativeNumber) {
        psl {
            this "handle" pul_var member pul_eval "__value" member
            dlclose null
        }
    };

    dlsym = (handle as NativeNumber, symbol as String) {
        psl {
            this "handle" pul_var member pul_eval "__value" member
            this "symbol" pul_var member pul_eval "__value" member
            dlsym
            push0 null
            {}
            {
                1 integer array
                this "opNumber" pul_var member pul_eval call
            } cmp
        }
    };

    malloc = (sz as NativeNumber) {
        opNumber(psl {
            this "sz" pul_var member pul_eval "__value" member
            cmalloc
        })
    };

    free = (ptr as NativeNumber) {
        psl {
            this "ptr" pul_var member pul_eval "__value" member
            cfree null
        }
    };

    get = (ptr as NativeNumber, sz as NativeNumber) {
        opString(psl {
            this "ptr" pul_var member pul_eval "__value" member
            this "sz"  pul_var member pul_eval "__value" member
            cget
        })
    };

    set = (ptr as NativeNumber, value as String) {
        psl {
            this "ptr"   pul_var member pul_eval "__value" member
            this "value" pul_var member pul_eval "__value" member
            cset null
        }
    };

    sizeof = (type as NativeNumber) {
        opNumber(psl {
            this "type" pul_var member pul_eval "__value" member
            csizeof
        })
    };

    prepcif = (rtype as NativeNumber, atypes as Array, abi as NativeNumber) {
        // extract the values out of the types array
        var nat = psl { 0 integer array };
        atypes.each((elem) {
            nat = psl {
                this "nat" pul_var member pul_eval
                this "elem" pul_var member pul_eval "__value" member
                1 integer array aconcat
            };
        });

        // and call prepcif
        return(opNumber(psl {
            this "rtype" pul_var member pul_eval "__value" member
            this "nat" pul_var member pul_eval
            this "abi" pul_var member pul_eval "__value" member
            prepcif
        }));
    };

    call = (cif as NativeNumber, fn as NativeNumber, cargs as Array) {
        // extract the values out of the args array
        var nargs = psl { 0 integer array };
        cargs.each((elem) {
            nargs = psl {
                this "nargs" pul_var member pul_eval

                // elem as CData
                this "CData" pul_var member pul_eval 1 integer array
                this "elem"  pul_var member pul_eval "opAs" member call

                // combine them
                1 integer array aconcat
            };
        });

        // then call
        var ret = CData:[];
        ret.__value = psl {
            this "cif"   pul_var member pul_eval "__value" member
            this "fn"    pul_var member pul_eval "__value" member
            this "nargs" pul_var member pul_eval
            ccall
        };
        return(ret);
    };

    // types
    void = opNumber(psl { 0 integer ctype });
    int = opNumber(psl { 1 integer ctype });
    float = opNumber(psl { 2 integer ctype });
    double = opNumber(psl { 3 integer ctype });
    longdouble = opNumber(psl { 4 integer ctype });
    uint8 = opNumber(psl { 5 integer ctype });
    int8 = opNumber(psl { 6 integer ctype });
    uint16 = opNumber(psl { 7 integer ctype });
    int16 = opNumber(psl { 8 integer ctype });
    uint32 = opNumber(psl { 9 integer ctype });
    int32 = opNumber(psl { 10 integer ctype });
    uint64 = opNumber(psl { 11 integer ctype });
    int64 = opNumber(psl { 12 integer ctype });
    pointer = opNumber(psl { 14 integer ctype });
    uchar = opNumber(psl { 24 integer ctype });
    schar = opNumber(psl { 25 integer ctype });
    ushort = opNumber(psl { 26 integer ctype });
    short = opNumber(psl { 27 integer ctype });
    uint = opNumber(psl { 28 integer ctype });
    ulong = opNumber(psl { 30 integer ctype });
    long = opNumber(psl { 31 integer ctype });
    ulonglong = opNumber(psl { 32 integer ctype });
    longlong = opNumber(psl { 33 integer ctype });
];

// a pseudotype containing raw data for C
var CData = Object : [
    opCastFrom = (x) {
        if(x is Number, (
            // it already has __value, so accept it as-is
            return(this : (x as NativeNumber));
        ), else, (
            return(psl { null });
        ));
    };

    opCastTo = (x) {
        if(x is Number, (
            // this already has __value, so accept it as-is
            return(this : NativeNumber);
        ), else, (
            return(psl { null });
        ));
    };
];
