/*
 * A pseudo-AST for PSL
 *
 * Copyright (C) 2010 Gregor Richards
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var ASTNode = Object : []

var UnaryASTNode = ASTNode : [
    this (c) {
        this.first = c
    }
]

var BinaryASTNode = UnaryASTNode : [
    this (c1, c2) {
        super(c1)
        this.second = c2
    }
]

var TrinaryASTNode = BinaryASTNode : [
    this (c1, c2, c3) {
        super(c1, c2)
        this.third = c3
    }
]

var QuaternaryASTNode = TrinaryASTNode : [
    this (c1, c2, c3, c4) {
        super(c1, c2, c3)
        this.fourth = c4
    }
]

var QuinaryASTNode = QuaternaryASTNode : [
    this (c1, c2, c3, c4, c5) {
        super(c1, c2, c3, c4)
        this.fifth = c5
    }
]

// Build AST node types of all the simple cases
var i
for (i = psl.ppop.val + 1) (i <= 255) (i++) (
    if (psl.pslInstructions[i] !== Null) (
        var inst = psl.pslInstructions[i]
        var p = ASTNode

        if          (inst.arity == 0) (p = ASTNode) \
        else if     (inst.arity == 1) (p = UnaryASTNode) \
        else if     (inst.arity == 2) (p = BinaryASTNode) \
        else if     (inst.arity == 3) (p = TrinaryASTNode) \
        else if     (inst.arity == 4) (p = QuaternaryASTNode) \
        else if     (inst.arity == 5) (p = QuinaryASTNode)

        inst.ASTNode = p : [
            instruction = inst
        ]
    )
)

/* pushes and pops have no AST nodes, resolve is very special, and there are a
 * few nodes which are not directly correlated to instructions */

// resolve has a false arity of four, where two of the children are in fact temps to write into
psl.presolve.ASTNode = BinaryASTNode : [
    this (c1, c2, t1, t2) {
        super(c1, c2)
        this.t1 = t1
        this.t2 = t2
    }

    toString = {
        "(resolve " ~ first.toString() ~ " " ~ second.toString() ~ " " ~ t1.toString() ~ " " ~ t2.toString() ~ ")"
    }

    instruction = psl.presolve
]

// seq is just a sequence of instructions
var Seq = ASTNode : [
    this (children as Collection) {
        this.children = children
    }

    instruction = Null
]

// settemp and gettemp set and get temporary variables, respectively
var SetTemp = UnaryASTNode : [
    this (t1, c1) {
        super(c1)
        this.temp = t1
    }

    instruction = Null
]
var GetTemp = ASTNode : [
    this (t1) {
        this.temp = t1
    }

    instruction = Null
]

import(pslastString)

var pslToAst = (pslbuf) {
    var astout = [[ ]]
    var aststack = [[ ]]
    var curtemp = 0

    var saveStack = {
        // for each element of the stack, save it as a temp
        var i
        for (i = 0) (i < aststack.length()) (i++) (
            var elem = aststack[i]
            if (!(elem is GetTemp)) (
                // it's not a gettemp, so make it so
                var st = new SetTemp(curtemp, elem)
                aststack[i] = new GetTemp(curtemp)
                astout ~= [[ st ]]
                curtemp++
            )
        )
    }

    while (pslbuf.length() > 0) (
        // get the current instruction
        var cmd = pslbuf[0]
        pslbuf = pslbuf.sliceFrom(1)
        var raw = Null

        // maybe it has raw data
        if (cmd >= psl.pmarker.val) (
            // it has raw data
            var rawlen
            pslbuf = pslbignum.bignumToInt(pslbuf, ref rawlen)
            raw = pslbuf.slice(0, rawlen)
            pslbuf = pslbuf.sliceFrom(rawlen)
        )

        // get the command object
        cmd = psl.pslInstructions[cmd]

        // if we need to save our stack, do so
        if (cmd.val <= psl.ppush7.val || cmd.pushes != 1) (
            saveStack()
        )

        // now handle all the commands in their own unique way
        if (cmd.val >= psl.ppush0.val && cmd.val <= psl.ppush7.val) (
            // handle pushes by just copying the appropriate element
            if (aststack.length() > cmd.val) (
                aststack ~= [[ aststack[aststack.length() - 1 - cmd.val] ]]
            ) else (
                aststack ~= [[ new (psl.pnull.ASTNode)() ]]
            )

        ) else if (cmd === psl.ppop) (
            // simple
            aststack = aststack.slice(0, aststack.length() - 1) as Array as ListArray

        ) else if (cmd === psl.presolve) (
            // the strangest case, write into two temps
            var t1 = curtemp
            var t2 = curtemp + 1
            curtemp = curtemp + 2

            // add the resolve instruction to the output
            astout ~= [[
                new (psl.presolve.ASTNode)(
                    aststack[aststack.length()-2],
                    aststack[aststack.length()-1],
                    t1, t2
                )
            ]]
            aststack = aststack.slice(0, aststack.length() - 2) as Array as ListArray

            // add the gettemps to the stack
            aststack ~= [[
                new GetTemp(t1),
                new GetTemp(t2)
            ]]

        ) else if (cmd === psl.parray) (
            // mixed arity, try to figure it out
            var arity = 1
            if (aststack.length() >= 1 && aststack[aststack.length() - 1] is psl.pinteger) (
                // FIXME: actually do something here
            )

            var tp = new (psl.parray.ASTNode)(aststack.sliceFrom(aststack.length() - arity) as Array)
            aststack = (aststack.slice(0, aststack.length() - arity) as Array) ~ [[ tp ]]

        ) else if (cmd === psl.pcode) (
            // parse it
            var tp = new (psl.pcode.ASTNode)()
            tp.code = pslToAst raw
            aststack = aststack ~ [[ tp ]]

        ) else (
            // the rest is all simple

            // make sure we have enough
            while (aststack.length() < cmd.arity) (
                // add a null to the beginning
                aststack = [[ new (psl.pnull.ASTNode)() ]] ~ aststack
            )

            // now figure out what to push
            var len = aststack.length()
            var tp
            if (cmd.ASTNode is QuinaryASTNode) (
                tp = new (cmd.ASTNode)(aststack[len-5], aststack[len-4], aststack[len-3], aststack[len-2], aststack[len-1])
            ) else if (cmd.ASTNode is QuaternaryASTNode) (
                tp = new (cmd.ASTNode)(aststack[len-4], aststack[len-3], aststack[len-2], aststack[len-1])
            ) else if (cmd.ASTNode is TrinaryASTNode) (
                tp = new (cmd.ASTNode)(aststack[len-3], aststack[len-2], aststack[len-1])
            ) else if (cmd.ASTNode is BinaryASTNode) ( 
                tp = new (cmd.ASTNode)(aststack[len-2], aststack[len-1])
            ) else if (cmd.ASTNode is UnaryASTNode) (
                tp = new (cmd.ASTNode)(aststack[len-1])
            ) else (
                tp = new (cmd.ASTNode)()
            )

            // maybe add the raw data
            if (raw !== Null) (
                tp.raw = raw
            )

            // and push it
            aststack = aststack.slice(0, len - cmd.arity) as Array as ListArray
            if (cmd.pushes == 1) (
                aststack = aststack ~ [[ tp ]]
            ) else (
                astout = astout ~ [[ tp ]]
            )

        )
    )

    // now move the stack onto the output
    astout = (astout ~ aststack) as Array as ListArray

    // and output it as a seq
    return (new Seq(astout))
}
