Debug.print("Version strings:")
var x
versions.each (ref x) (
    Debug.print(x)
)

Debug.print("Integer value 3 is always good.")

// Prototypes test
var a = Object : []
var b = a : []
a.a = 3
Debug.print(b.a)


// Simple true/false test
True.ifTrue(Debug.print("GOOD"))
False.ifTrue(Debug.print("BAD"))


// If "statements"
if (True) (
    Debug.print("GOOD")
) else (
    Debug.print("BAD")
)


// Currying
var curryish = (a, b, c) {
    Debug.print(a)
    Debug.print(b)
    Debug.print(c)
}
curryish "This should come first." "Then this." "Then this should come third and last."


// While "statement"
var a = True
var b = True
var c = True
var d = False
while (a) (
    Debug.print("This should be printed three times.")
    a = b
    b = c
    c = d
)


// Constructors
var Foo = Object : [
    this (n) {
        this.n = n
    }
]
var foo = new Foo(3)
Debug.print(foo.n)


// Try/catch
Debug.print("Try")
var x = Object
try (
    throw (3)
) catchall (ref x) (
    psl { plof{x.__pul_val} pul_eval print }
)


// Object types
Debug.print("Types")
if (Foo is Foo) (
    Debug.print("GOOD")
) else (
    Debug.print("BAD")
)
if (Foo is Object) (
    Debug.print("GOOD")
) else (
    Debug.print("BAD")
)
if (Object is Foo) (
    Debug.print("BAD")
) else (
    Debug.print("GOOD")
)


// Typed functions
Debug.print("Typed functions")
var foo = (x as Foo) {
    x
}
try (
    foo(Foo)
    Debug.print("GOOD")
) catchall (ref x) (
    Debug.print("BAD")
)
try (
    foo(Object)
    Debug.print("BAD")
) catchall (ref x) (
    Debug.print("GOOD")
)


// Numbers
Debug.print("Numbers")
x = 27 - 6 * 4
Debug.print(x)


// Arrays
Debug.print("Arrays")
x = new Array(psl {
    plof{4} 1 array
})
x[0] = 3
psl { plof{x[0]} pul_eval "__pul_val" member print }


// Lists
Debug.print("Lists")
x = new MList(Object)
x[1] = 3
psl { plof{x[1]} pul_eval "__pul_val" member print }


// ListArrays
Debug.print("ListArrays")
x = [[ 0, 1, 2, 3, 4, 5 ]]
psl { plof{x[3]} pul_eval "__pul_val" member print }
x ~= [[ 4, 3, 2, 1, 0 ]]
psl { plof{x[7]} pul_eval "__pul_val" member print }

x ~= x
psl { plof{x[14]} pul_eval "__pul_val" member print }


// Strings
Debug.print("Strings")
x = "Hello, "
if (x == "Hello, ") (
    Debug.print("GOOD")
) else (
    Debug.print("BAD")
)
if (x == "world!") (
    Debug.print("BAD")
) else (
    Debug.print("GOOD")
)


// Ranges
Debug.print("Ranges")
Debug.print("This test should print all the numbers from 0 to 9 which are divisible by 2")
psl { debug }
(0 to 1000 by 2).each (ref x) (
    Debug.print(x)
)
psl { debug }
for (x = 0) (x < 1000) (x = x + 2) (
    Debug.print(x)
)
psl { debug }


// Concatenation
var y
Debug.print("Concatenation")
Debug.print("This should print the numbers from 1 to 5, then Hello, world!")
x = [[ 1, 2, 3 ]] ~ [[ 4, 5 ]]
x.each (ref y) (
    Debug.print(y)
)
x = "Hello, " ~ "world!"
Debug.print(x)
