/*
 * I/O mediated by the CNFI
 *
 *  Copyright (c) 2009, 2010 Josiah Worcester
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

C.__fopen = C.libc("fopen", C.pointer, [[C.pointer, C.pointer]])
C.__fputs = C.libc("fputs", C.int, [[ C.pointer, C.pointer ]])
C.__fread = C.libc("fread", C.pointer, [[ C.pointer, C.pointer, C.pointer, C.pointer ]])
C.__fgets = C.libc("fgets", C.pointer, [[ C.pointer, C.int, C.pointer ]])
C.__getline = C.libc("getline", C.pointer, [[ C.pointer, C.pointer, C.pointer ]])
C.__fclose = C.libc("fclose", C.int, [[C.pointer]])
C.__feof = C.libc("feof", C.int, [[C.pointer]])
C.__fflush = C.libc("fflush", C.int, [[C.pointer]])
C.__fdopen = C.libc("fdopen", C.pointer, [[ C.int, C.pointer ]])
C.fdopen = (x as NativeInteger, y as String) {
    var c_y = C.calloc(y.length() + 1)
    if(c_y == 0) (
        exit 1
    )
    C.set c_y y
    var ret = C.__fdopen( [[ x, c_y ]] ) as CPointer
    C.free c_y
    return ret
}

var PermissionDeniedException = Exception : [
    this(file as String) {
        setMessage(file ~ ": Permission denied")
    }
]

var File = Handle : [
    this (file as String, type as String) {
        var c_file = C.calloc(file.length() + 1)
        var c_type = C.calloc(type.length() + 1)
        if (c_file == 0 || c_type == 0) (
            exit 1
        )

        C.set c_file file
        C.set c_type type

        this.filepointer = C.__fopen([[c_file, c_type]])

        C.free c_file
        C.free c_type

        if (this.filepointer == Null) (
            throw (new PermissionDeniedException(file))
        )
    }

    filepointer = Null as CPointer

    write = (x as String) {
        var c_x = C.calloc(x.length() + 1)
        if (c_x == 0) (
            exit 1
        )

        C.set c_x x
        var ret = C.__fputs([[c_x, this.filepointer]]) as NativeInteger
        C.free c_x
        return ret
    }

    read = (x as NativeInteger) {
        var sz = x + 1
        var c_data = C.calloc(x + 1)
        if (c_data == 0) (
            exit 1
        )

        var read_length = C.__fread([[ c_data, 1, x, this.filepointer]]) as NativeInteger
        var ret = C.get(c_data, read_length) as String
        C.free c_data
        return ret
    }

    readLine = () {
        var buf = C.calloc(1024)
        var input = C.__fgets([[buf, 1024, this.filepointer]])
        var str = C.getstr(buf)
        C.free buf
        var len = str.length()
        if (len > 0 && str.slice(len - 1, len) == "\n") (
            str = str.slice(0, len - 1)
        )
        return str
    }

    readFile = () {
        var buf = C.calloc(1024)
        var s = ""
        var rd = C.__fread([[buf, 1, 1024, this.filepointer]]) as NativeInteger
        while (rd > 0) (
            s = s ~ (C.get(buf, rd) as String)
            rd = C.__fread([[buf, 1, 1024, this.filepointer]]) as NativeInteger
        )
        return s
    }

    flush = () {
        C.__fflush([[this.filepointer]]) as NativeInteger
    }

    eof = () {
        var ret = C.__feof([[this.filepointer]]) as NativeInteger
        return (ret != 0)
    }

    close = () {
        var ret = C.__fclose([[this.filepointer]]) as NativeInteger
        this.filepointer = Null as CPointer
        return ret
    }
]

Stdin = File : []
Stdin.filepointer = C.fdopen 0 "r"
Stdout = File : []
Stdout.filepointer = C.fdopen 1 "w"
Stderr = File : []
Stderr.filepointer = C.fdopen 2 "w"
