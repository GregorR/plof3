/*
 * Basic members of Object and Function
 *
 *  Copyright (c) 2008  Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// the Function type will be filled in later, but for the moment we can just stub it
var Function = Object : [];

// trivial plof function calls
plofbnf {
    plof_group = plof_group "\(" plof_args "\)" => plof {
        psl { $2 pul_eval $0 pul_eval call }
    }


    plof_args = white => plof {
        psl { 0 integer array }
    }

    plof_args = plof_args "," plof_args_next => plof {
        psl { $0 pul_eval $2 pul_eval aconcat }
    }

    plof_args = plof_args_next => plof {
        $0
    }

    plof_args => plof_arg;

    plof_arg = plof_comma_next => plof {
        psl { $0 1 integer array }
    }
};

// FIXME: Should use proper combination
var opFunction = Function:psl { {
    // get the procedure
    this "proc" push2 0 integer index pul_eval memberset

    // combine it with Function
    plof { Function:proc } pul_eval
} };


// opMember is a function ...
Object.opMember = Function:psl { {
    // args: [name, next context]
    this "name" push2 0 integer index pul_eval memberset
    this "next" push2 1 integer index pul_eval memberset

    // first check if we have this
    null this "this" resolve member this "name" member member null
    {
        // it's not here, try the type
        this "__pul_type" resolve member 1 integer 2 integer array
        {
            // args: [type, index]

            // make sure we're not beyond the end of the array
            push0 0 integer index length push1 1 integer index
            {
                // not found
                new
                push0 "__pul_opmember_search" new memberset
                push0 "__pul_opmember_found" null memberset
                throw
            }
            {
                // OK, check if that type has this
                push0 0 integer index push1 1 integer index index
                
                push0 this "name" resolve member member null
                {}
                {
                    // found it, get it
                    push0 this "name" resolve member member 

                    // then duplicate it
                    this "opDuplicate" resolve member call

                    // reparent it
                    push0 this "this" resolve member parentset

                    // and assign it into us
                    this "this" resolve member this "name" resolve member push2 memberset

                    // then throw it
                    new
                    push0 "__pul_opmember_search" new memberset
                    push0 "__pul_opmember_found" push3 memberset
                    throw
                } cmp
            } lte

            // add and loop
            push0
                1 integer
                    push1 1 integer index
                    1 integer
                    add
            indexset
            loop
        }
        {
            // is this our response?
            push0 "__pul_opmember_search" null
            {
                // no, throw it again
                throw
            }
            {
                // Yes. Is it null?
                "__pul_opmember_found" member push0 null
                {
                    // Yes. Check with the next guy.
                    this "name" resolve member "opMember"
                    this "next" resolve member
                    push2 push2 2 integer array resolve
                    4 integer array

                    // now check whether we used opMember or the name
                    push0 1 integer index
                    push1 3 integer index
                    {
                        // used opMember, call it
                        push0 0 integer index
                        push1 2 integer index parent 2 integer array
                        push1 2 integer index "opMember" member pul_eval call
                    }
                    {
                        // no opMember
                        push0 2 integer index
                        push1 0 integer index
                        member
                    } cmp
                }
                {
                    // Found it, just pass it along.
                } cmp
            } cmp
        } catch
    }
    {
        // we have it, simple enough
        this "this" resolve member
        this "name" resolve member
        member
    } cmp
} };
psl { this "Object" resolve member push0 "opMember" member push1 parentset pop };


// more advanced function syntax
plofbnf {
    plof_group = "\(" plof_params "\)" "\{" plof_funcbody "\}" => {
        // make this a function context
        {this "__pul_fc" this memberset 0 integer}

        // set up the args
        push1 1 integer index concat
        {
            pop

            // then opArray them and name them "args"
            this "args"
                push2
                    this "opArray" resolve member
                call
            memberset pop
        } concat
        
        // then run the function itself
        push1 4 integer index concat

        // wrap it up with opFunction
        cwrap {1 integer array this "opFunction" resolve member call} concat

        // then wrap the whole thing up
        cwrap {pul_funcwrap} concat
    }

    
    plof_params = white => {
        {}
    }

    plof_params = plof_params "," plof_params_next => {
        push0 0 integer index
        push1 2 integer index concat
    }

    plof_params = plof_params_next => {
        push0 0 integer index
    }

    plof_params => plof_param;


    // type annotations to come later
    plof_param = plof_identifier => {
        // this.name ...
        {this}
        push1 0 integer index concat

        // = the val
        {
            push3 push3 index memberset
        
            // and increment
            1 integer add
        } concat
    }


    plof_funcbody = white => { {} }
    plof_funcbody = plof_funcbody_next => plof { $0 }
    plof_funcbody => plof_funcbody_prime;

    plof_funcbody_prime = plof_semicolon => plof { $0 }
};

plofbnf {
    plof_group = "\{" plof_funcbody "\}" => plof {
        () { $1 }
    }
};
