/*
 * Interface for the C Native Function Interface
 *
 *  Copyright (c) 2008, 2009, 2010 Gregor Richards
 *  Copyright (c) 2009 Josiah Worcester
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// the psl operations
grammar {
    pslOp = "dlopen" =>     { 193 byte }
    pslOp = "dlclose" =>    { 194 byte }
    pslOp = "dlsym" =>      { 195 byte }
    pslOp = "cget" =>       { 196 byte }
    pslOp = "cset" =>       { 197 byte }
    pslOp = "ctype" =>      { 199 byte }
    pslOp = "cstruct" =>    { 200 byte }
    pslOp = "csizeof" =>    { 201 byte }
    pslOp = "csget" =>      { 202 byte }
    pslOp = "csset" =>      { 203 byte }
    pslOp = "prepcif" =>    { 204 byte }
    pslOp = "ccall" =>      { 205 byte }
}

// the type of pointers from dlopen/dlsym/etc
var CPointer = Object : [
    this(x) {
        this.__pul_val = x
    }

    opCastFrom = (x) {
        if (x === Null) (
            return (new CPointer(Null))
        ) else (
            return Null
        )
    }
]
var opCPointer = (x) {
    new CPointer(x)
}


// and their Plof equivalents
var C = Object : [
    dlopen = (filename as String) {
        psl {
            plof{filename.__pul_val} pul_eval
            dlopen
            push0 null
            { plof{Null} }
            {
                1 array
                plof{opCPointer} pul_eval call
            } cmp
        }
    }

    dlclose = (handle as CPointer) {
        psl {
            plof{handle.__pul_val} pul_eval
            dlclose null
        }
    }

    dlsym = (handle as CPointer, symbol as String) {
        psl {
            plof{handle.__pul_val} pul_eval
            pul_Nullnull
            plof{symbol.__pul_val} pul_eval
            dlsym
            push0 null
            { plof{Null} }
            {
                1 array
                plof{opCPointer} pul_eval call
            } cmp
        }
    }

    get = (ptr as CPointer, sz as NativeInteger) {
        var ret = CData : []
        ret.__pul_val = psl {
            plof{ptr.__pul_val} pul_eval
            plof{sz.__pul_val} pul_eval
            cget
        }
        return(ret)
    }

    set = (ptr as CPointer, value) {
        psl {
            plof{ptr.__pul_val} pul_eval
            plof{value.__pul_val} pul_eval
            cset null
        }
    }

    sizeof = (type as NativeInteger) {
        opInteger(psl {
            plof{type.__pul_val} pul_eval
            csizeof
        })
    }

    prepcif = (rtype as CPointer, atypes as Array, abi as NativeInteger) {
        // extract the values out of the types array
        var nat = psl { 0 array }
        var elem
        atypes.each (ref elem) (
            nat = psl {
                plof{nat} pul_eval
                plof{elem.__pul_val} pul_eval
                1 array aconcat
            }
        )

        // and call prepcif
        return(opCPointer(psl {
            plof{rtype.__pul_val} pul_eval
            plof{nat} pul_eval
            plof{abi.__pul_val} pul_eval
            prepcif
        }))
    }

    call = (cif as CPointer, fn as CPointer, cargs as Array) {
        // extract the values out of the args array
        var nargs = psl { 0 array }
        var elem
        cargs.each (ref elem) (
            nargs = psl {
                plof{nargs} pul_eval

                // elem as CData
                /* FIXME
                this "CData" pul_var member pul_eval 1 array
                this "elem"  pul_var member pul_eval "opAs" member call
                "__pul_val" member */
                plof{elem.__pul_val} pul_eval

                // combine them
                1 array aconcat
            }
        )

        // then call
        var ret = CData:[]
        ret.__pul_val = psl {
            plof{cif.__pul_val} pul_eval
            plof{fn.__pul_val} pul_eval
            plof{nargs} pul_eval
            ccall
        }
        return(ret)
    }

    wrapper = (library as CPointer, function as String, returnType as CPointer, argTypes as Array) {
        var x_s = C.dlsym library function
        var x_c = C.prepcif returnType argTypes 0
        return (C.call x_c x_s)
    }
]

// MAJOR HUGE FIXME: I had to split this due to a bug in the parser that is causing it to chew up huge amounts of memory
    // types
C.void = opCPointer(psl { 0 ctype })
C.int = opCPointer(psl { 1 ctype })
C.float = opCPointer(psl { 2 ctype })
C.double = opCPointer(psl { 3 ctype })
C.longdouble = opCPointer(psl { 4 ctype })
C.uint8 = opCPointer(psl { 5 ctype })
C.int8 = opCPointer(psl { 6 ctype })
C.uint16 = opCPointer(psl { 7 ctype })
C.int16 = opCPointer(psl { 8 ctype })
C.uint32 = opCPointer(psl { 9 ctype })
C.int32 = opCPointer(psl { 10 ctype })
C.uint64 = opCPointer(psl { 11 ctype })
C.int64 = opCPointer(psl { 12 ctype })
C.pointer = opCPointer(psl { 14 ctype })
C.uchar = opCPointer(psl { 24 ctype })
C.schar = opCPointer(psl { 25 ctype })
C.ushort = opCPointer(psl { 26 ctype })
C.short = opCPointer(psl { 27 ctype })
C.uint = opCPointer(psl { 28 ctype })
C.ulong = opCPointer(psl { 30 ctype })
C.long = opCPointer(psl { 31 ctype })
C.ulonglong = opCPointer(psl { 32 ctype })
C.longlong = opCPointer(psl { 33 ctype })


// a pseudotype containing raw data for C
var CData = Object : [
    opCastFrom = (x) {
        if (x is Number) (
            // it already has __pul_val, so accept it as-is
            return(this : (x as NativeInteger))
        ) else if (x is String) (
            return(this : (x as String))
        ) else (
            return(Null)
        )
    }

    opCastTo = (x) {
        if (x is Number) (
            // the number might be in the wrong format, so convert
            return(opInteger(psl {
                plof{this.__pul_val} pul_eval cinteger
            }))
        ) else if (x is String) (
            return(this : String)
        ) else if (x is CPointer) (
            return(this : CPointer)
        ) else (
            return(Null)
        )
    }

    opEquals = (x) {
        if (x is CData) (
            // compare the data
            psl {
                null
                plof{this.__pul_val} pul_eval
                plof{x.__pul_val} pul_eval
                {
                    plof{return True} pul_eval
                }
                {
                    plof{return False} pul_eval
                } rawcmp
            }

        ) else if (x === Null) (
            // just a null comparison
            psl {
                null
                plof{this.__pul_val} pul_eval cinteger
                0
                {
                    plof{return True} pul_eval
                }
                {
                    plof{return False} pul_eval
                } eq
            }
        ) else (
            return False
        )
    }
]

// convenient wrappers
if ("Darwin" in versions) (
    C.libc = C.wrapper (C.dlopen "libc.dylib")
) else (
    /* most platforms use NULL for "whatever I've already got" (libc, but
     * technically also gc, pcre, ...) */
    C.libc = C.wrapper Null
)

C.__malloc = C.libc("malloc", C.pointer, [[C.pointer]])
C.malloc = (x as NativeInteger) {
    C.__malloc([[x]]) as CPointer
}

C.__calloc = C.libc("calloc", C.pointer, [[C.pointer, C.pointer]])
C.calloc = (x as NativeInteger) {
    C.__calloc([[x, 1]]) as CPointer
}

C.__free = C.libc("free", C.void, [[C.pointer]])
C.free = (x as CPointer) {
    C.__free([[x]])
}

C.__strlen = C.libc("strlen", C.pointer, [[C.pointer]])
C.strlen = (x as CPointer) {
    C.__strlen([[x]]) as Number
}

C.getstr = (x as CPointer) {
    var l = C.strlen(x)
    C.get(x, l) as String
}

// things that need CNFI
C.__exit = C.libc("exit", C.void, [[C.int]])
var exit = (x as NativeInteger) {
    C.__exit([[x]])
}
