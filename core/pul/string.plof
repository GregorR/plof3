/*
 * The standard Plof string class.
 *
 *  Copyright (c) 2007, 2009  Gregor Richards
 *  Copyright (c) 2007  Josiah Worcester
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

// A string in Plof supports the typical C escapes

plofbnf {
    // The pul_char stuff. Basically, a normal char + escapes
    pul_char = /[^\\"]/ => {
        push0 0 integer index call
    }
    pul_char = /\\0/ => { // NULL
        0 integer byte
    }
    pul_char = /\\a/ => { // Bell
        7 integer byte
    }
    pul_char = /\\b/ => { // Backspace
        8 integer byte
    }
    pul_char = /\\t/ => { // Horizontal tab
        9 integer byte
    }
    pul_char = /\\n/ => { // Newline
        10 integer byte
    }
    pul_char = /\\v/ => { // Vertical tab
        11 integer byte
    }
    pul_char = /\\f/ => { // Form feed
        12 integer byte
    }
    pul_char = /\\r/ => { // Carriage return
        13 integer byte
    }
    pul_char = /\\e/ => { // Escape
        27 integer byte
    }
    pul_char = /\\"/ => {  // "
        34 integer byte
    }
    pul_char = /\\\\/ => { // \
        92 integer byte
    }
    pul_char = /\\\{/ number /\}/ => { // \{code}
        push0 1 integer index byte
    }

    // pul_chars is any number of pul_char. . .
    pul_chars = pul_char pul_chars => {
        push0 0 integer index push1 1 integer index concat
    }
    pul_chars = pul_char => {
        push0 0 integer index
    }

    // and pul_str is pul_chars in PSL
    pul_str = pul_chars => {
        push0 0 integer index {""} wrap
    }

    // strings in plof
    plof_literal = /"/ white pul_str /"/ white => plof {
        new String($2)
    }
    plof_literal = /""/ white => plof {
        new String(psl { "" })
    }

    /* pul_string = white /"/ pul_chars /"/ => {
        push0 2 integer index wrap
        {1 integer array
         this "opString" pul_var member pul_eval call} concat
        wrap {pul_funcwrap} concat
    }
    pul_string = white /""/ => {
        "" wrap
        {1 integer array
         this "opString" pul_var member pul_eval call} concat
        wrap {pul_funcwrap} concat
    }
    plof_literal = pul_string => {
        0index
    }*/
};

// Strings are all String objects, which is currently a stub
var String = Object : [
    this (intstring) {
        this.__pul_val = intstring;
    };

    opEquals = (x) {
        var xs = x as String;
        if (!(xs is null)) (
            return (opInteger(psl {
                    plof{this.__pul_val} pul_eval
                    plof{xs.__pul_val} pul_eval
                    rawcmp
                }) == 0);
        );
        return False;
    };
];
