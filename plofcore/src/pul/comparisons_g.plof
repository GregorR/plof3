/*
 * Comparisons
 *
 *  Copyright (c) 2008  Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

grammar {
    plof_and => plof_equals

    plof_equals = plof_equals "=="w plof_equals_next => plof {
        $0.opEquals($2)
    }
    plof_equals = plof_equals "!="w plof_equals_next => plof {
        $0.opNEquals($2)
    }
    plof_equals = plof_equals "==="w plof_equals_next => {
        {
            null
        }
        push1 0 index
        pul_apply_eval concat
        push1 2 index
        pul_apply_eval concat
        {
            {
                plof{True}
            }
            {
                plof{False}
            } cmp
        } concat
        pul_apply_funcwrap
    }
    plof_equals = plof_equals "!=="w plof_equals_next => {
        {
            null
        }
        push1 0 index
        pul_apply_eval concat
        push1 2 index
        pul_apply_eval concat
        {
            {
                plof{False}
            }
            {
                plof{True}
            } cmp
        } concat
        pul_apply_funcwrap
    }
    plof_equals = plof_equals_next => plof { $0 }
    plof_equals => plof_cmp

    plof_cmp = plof_cmp "<"w plof_cmp_next => plof {
        $0.opLess($2)
    }
    plof_cmp = plof_cmp "<="w plof_cmp_next => plof {
        $0.opLessEqual($2)
    }
    plof_cmp = plof_cmp ">"w plof_cmp_next => plof {
        $0.opGreater($2)
    }
    plof_cmp = plof_cmp ">="w plof_cmp_next => plof {
        $0.opGreaterEqual($2)
    }
    plof_cmp = plof_cmp_next => plof { $0 }
}
