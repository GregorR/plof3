/*
 * Basic members of Object and Function
 *
 *  Copyright (c) 2008, 2009 Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */


// the Function type
var Function = Object : []


// FIXME: Should use proper combination
var opFunction = Function:psl { {
    // get the procedure
    this "proc" push2 0 index pul_eval memberset

    // combine it with Function
    plof { Function:proc } pul_eval
} }


/// The Plof version of psl{null}
var Null = Object:[]


/// Some useful functions
var selff = (x) { selff }
var id = (x) { x }


/// Standard object initialization
var new = (type) {
    var robj = type:[]
    robj.parent = type.parent
    robj.init
}
Object := [init = {this};]


/// References
var Reference = Object : [
    this (readx, writex) {
        this.read = readx
        this.write = writex
    }
]


/// The debug object, just used for debug-printing before *NFI can be loaded
var Debug = Object : [
    print = (val) {
        psl { plof{val.__pul_val} pul_eval print }
        Null
    }
]
